package com.ufg.notificacoes.activity;

import java.util.Date;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.annotation.TargetApi;
import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.ufg.notificacoes.R;
import com.ufg.notificacoes.bean.GrupoEnvio;
import com.ufg.notificacoes.bean.Notificacao;
import com.ufg.notificacoes.bean.Usuario;
import com.ufg.notificacoes.dao.ConfiguracoesDao;
import com.ufg.notificacoes.dao.GrupoEnvioDao;
import com.ufg.notificacoes.dao.NotificacaoDao;
import com.ufg.notificacoes.dao.UsuarioDao;
import com.ufg.notificacoes.util.Util;

/**
 * Activity which displays a login screen to the user, offering registration as
 * well.
 */
public class LoginActivity extends Activity {
	/**
	 * A dummy authentication store containing known user names and passwords.
	 * TODO: remove after connecting to a real authentication system.
	 */
	private static final String[] DUMMY_CREDENTIALS = new String[] {
			"foo@example.com:hello", "bar@example.com:world" };

	/**
	 * The default email to populate the email field with.
	 */
	public static final String EXTRA_EMAIL = "aluno@ufg.com.br";

	/**
	 * Keep track of the login task to ensure we can cancel it if requested.
	 */
	private UserLoginTask mAuthTask = null;

	// Values for email and password at the time of the login attempt.
	private String mEmail;
	private String mPassword;

	// UI references.
	private EditText mEmailView;
	private EditText mPasswordView;
	private View mLoginFormView;
	private View mLoginStatusView;
	private TextView mLoginStatusMessageView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		setContentView(R.layout.activity_login);

		// Set up the login form.
		mEmail = getIntent().getStringExtra(EXTRA_EMAIL);
		mEmailView = (EditText) findViewById(R.id.email);
		mEmailView.setText(mEmail);

		mPasswordView = (EditText) findViewById(R.id.password);
		mPasswordView
				.setOnEditorActionListener(new TextView.OnEditorActionListener() {
					@Override
					public boolean onEditorAction(TextView textView, int id,
							KeyEvent keyEvent) {
						if (id == R.id.login || id == EditorInfo.IME_NULL) {
							attemptLogin();
							return true;
						}
						return false;
					}
				});

		mLoginFormView = findViewById(R.id.login_form);
		mLoginStatusView = findViewById(R.id.login_status);
		mLoginStatusMessageView = (TextView) findViewById(R.id.login_status_message);

		findViewById(R.id.sign_in_button).setOnClickListener(
				new View.OnClickListener() {
					@Override
					public void onClick(View view) {
						attemptLogin();
					}
				});
		
		try {
			incluirDadosParaTeste();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		super.onCreateOptionsMenu(menu);
		getMenuInflater().inflate(R.menu.login, menu);
		return true;
	}

	/**
	 * Attempts to sign in or register the account specified by the login form.
	 * If there are form errors (invalid email, missing fields, etc.), the
	 * errors are presented and no actual login attempt is made.
	 */
	public void attemptLogin() {
		
		mEmail = mEmailView.getText().toString();
		mPassword = mPasswordView.getText().toString();
		
		UsuarioDao usuarioDao = new UsuarioDao(this);
		Usuario usuario = usuarioDao.validaLogin(mEmail, mPassword);
		
		if(usuario != null){
			Intent intent = new Intent(this, MainActivity.class);
			
			ConfiguracoesDao configDao = new ConfiguracoesDao(this);
			Configuracoes config = configDao.consultar();
			
			startActivity(intent);
		}else{
    		Toast.makeText(this, "Login ou senha incorretos!" , Toast.LENGTH_LONG).show();
		}
		
//		if (mAuthTask != null) {
//			return;
//		}
//
//		// Reset errors.
//		mEmailView.setError(null);
//		mPasswordView.setError(null);
//
//		// Store values at the time of the login attempt.
//		
//
//		boolean cancel = false;
//		View focusView = null;
//
//		// Check for a valid password.
//		if (TextUtils.isEmpty(mPassword)) {
//			mPasswordView.setError(getString(R.string.error_field_required));
//			focusView = mPasswordView;
//			cancel = true;
//		} else if (mPassword.length() < 4) {
//			mPasswordView.setError(getString(R.string.error_invalid_password));
//			focusView = mPasswordView;
//			cancel = true;
//		}
//
//		// Check for a valid email address.
//		if (TextUtils.isEmpty(mEmail)) {
//			mEmailView.setError(getString(R.string.error_field_required));
//			focusView = mEmailView;
//			cancel = true;
//		} else if (!mEmail.contains("@")) {
//			mEmailView.setError(getString(R.string.error_invalid_email));
//			focusView = mEmailView;
//			cancel = true;
//		}
//
//		if (cancel) {
//			// There was an error; don't attempt login and focus the first
//			// form field with an error.
//			focusView.requestFocus();
//		} else {
//			// Show a progress spinner, and kick off a background task to
//			// perform the user login attempt.
//			mLoginStatusMessageView.setText(R.string.login_progress_signing_in);
//			showProgress(true);
////			mAuthTask = new UserLoginTask();
////			mAuthTask.execute((Void) null);
//			
//			Intent intent = new Intent(this, MainActivity.class);
//			startActivity(intent);
//		}
	}

	/**
	 * Shows the progress UI and hides the login form.
	 */
	@TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)
	private void showProgress(final boolean show) {
		// On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow
		// for very easy animations. If available, use these APIs to fade-in
		// the progress spinner.
		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
			int shortAnimTime = getResources().getInteger(
					android.R.integer.config_shortAnimTime);

			mLoginStatusView.setVisibility(View.VISIBLE);
			mLoginStatusView.animate().setDuration(shortAnimTime)
					.alpha(show ? 1 : 0)
					.setListener(new AnimatorListenerAdapter() {
						@Override
						public void onAnimationEnd(Animator animation) {
							mLoginStatusView.setVisibility(show ? View.VISIBLE
									: View.GONE);
						}
					});

			mLoginFormView.setVisibility(View.VISIBLE);
			mLoginFormView.animate().setDuration(shortAnimTime)
					.alpha(show ? 0 : 1)
					.setListener(new AnimatorListenerAdapter() {
						@Override
						public void onAnimationEnd(Animator animation) {
							mLoginFormView.setVisibility(show ? View.GONE
									: View.VISIBLE);
						}
					});
		} else {
			// The ViewPropertyAnimator APIs are not available, so simply show
			// and hide the relevant UI components.
			mLoginStatusView.setVisibility(show ? View.VISIBLE : View.GONE);
			mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);
		}
	}
	
	public void incluirDadosParaTeste() throws Exception {
		UsuarioDao usuarioDao = new UsuarioDao(this);
		NotificacaoDao notificacaoDao = new NotificacaoDao(this);
		GrupoEnvioDao grupoEnvioDao = new GrupoEnvioDao(this);
		
		if(usuarioDao.listar().size() == 0){
			Usuario usuario = new Usuario();
			usuario.setNome("Italo Gustavo");
			usuario.setMatricula("092492");
			usuario.setSenha(Util.criptografaSenha("123456"));
			usuario.setEmail("aluno@ufg.com.br");
			usuario = usuarioDao.cadastrar(usuario);
	
			GrupoEnvio grupoEnvioUFG = new GrupoEnvio();
			grupoEnvioUFG.setNome("Universidade Federal de Goiás");
			grupoEnvioUFG.setRecebimentoAtivado(true);
			grupoEnvioUFG.setCodigo(0l);
			grupoEnvioUFG = grupoEnvioDao.cadastrar(grupoEnvioUFG);
			
			GrupoEnvio grupoEnvioEngSoftware = new GrupoEnvio();
			grupoEnvioEngSoftware.setNome("Engenharia de Software");
			grupoEnvioEngSoftware.setRecebimentoAtivado(true);
			grupoEnvioEngSoftware.setCodigo(5277l);
			grupoEnvioEngSoftware = grupoEnvioDao.cadastrar(grupoEnvioEngSoftware);
			
			Notificacao notificacao1 = new Notificacao();
			notificacao1.setLida(true);
			notificacao1
					.setTexto("Hoje não haverá aula da disciplina, estará disponível "
							+ "no moodle uma ativiade válida como presença.");
			notificacao1.setGrupoEnvio(grupoEnvioEngSoftware);
			notificacao1.setTimeData(new Date().getTime());
			notificacaoDao.cadastrar(notificacao1);
			
			Notificacao notificacao2 = new Notificacao();
			notificacao2.setLida(false);
			notificacao2
					.setTexto("A universidade está em greve nos próximos dias, portanto, "
							+ "até qualquer outro aviso as aulas estão suspensas.");
			notificacao2.setGrupoEnvio(grupoEnvioUFG);
			notificacao2.setTimeData(new Date().getTime());
			notificacaoDao.cadastrar(notificacao2);
		}
	}
	
	/**
	 * Represents an asynchronous login/registration task used to authenticate
	 * the user.
	 */
	public class UserLoginTask extends AsyncTask<Void, Void, Boolean> {
		@Override
		protected Boolean doInBackground(Void... params) {
			// TODO: attempt authentication against a network service.

			try {
				// Simulate network access.
				Thread.sleep(2000);
			} catch (InterruptedException e) {
				return false;
			}

			for (String credential : DUMMY_CREDENTIALS) {
				String[] pieces = credential.split(":");
				if (pieces[0].equals(mEmail)) {
					// Account exists, return true if the password matches.
					return pieces[1].equals(mPassword);
				}
			}

			// TODO: register the new account here.
			return true;
		}

		@Override
		protected void onPostExecute(final Boolean success) {
			mAuthTask = null;
			showProgress(false);

			if (success) {
				finish();
			} else {
				mPasswordView
						.setError(getString(R.string.error_incorrect_password));
				mPasswordView.requestFocus();
			}
		}

		@Override
		protected void onCancelled() {
			mAuthTask = null;
			showProgress(false);
		}
	}
}
