package com.ufg.notificacoes.dao;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import com.ufg.notificacoes.bean.Usuario;
import com.ufg.notificacoes.util.Util;

public class UsuarioDao extends SQLiteOpenHelper{

	private static final int VERSAO = 5;
	public static final String TABELA = "Usuario";
	private static final String DATABASE = "NotificacoesUFG";
	
	private static final String TAG = "CADASTRO_USUARIOS";
	public static final String ddlCreate = "CREATE TABLE " + TABELA + "( id INTEGER PRIMARY KEY, "
			+ "nome TEXT, "
			+ "email TEXT, "
			+ "matricula TEXT, "
			+ "senha TEXT)";
	
	public UsuarioDao(){
		super(null, DATABASE, null, VERSAO);
	}
	
	public UsuarioDao(Context context){
		super(context, DATABASE, null, VERSAO);
	}
			
	public UsuarioDao(Context context, String name, CursorFactory factory, int version) {
		super(context, name, factory, version);
	}

	@Override
	public void onCreate(SQLiteDatabase db) {
		NotificacaoDao notificacaoDao = new NotificacaoDao();
		notificacaoDao.onCreate(db);
		
		Log.i(TAG, "CRIANDO TABELA DE USUARIO");
	}

	@Override
	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
		String sql = "DROP TABLE IF EXISTS " + TABELA;
		db.execSQL(sql);
		onCreate(db);
	}
	
	public List<Usuario> listar(){
		
		List<Usuario> lista = new ArrayList<Usuario>();
		
		String sql = "SELECT id, nome, email, matricula, senha FROM " + TABELA + " ORDER BY nome ";
		
		Cursor cursor = getReadableDatabase().rawQuery(sql, null);
		
		try{
			while(cursor.moveToNext()){
				Usuario usuario = new Usuario();
				
				usuario.setId(cursor.getLong(0));
				usuario.setNome(cursor.getString(1));
				usuario.setEmail(cursor.getString(2));
				usuario.setMatricula(cursor.getString(3));
				usuario.setSenha(cursor.getString(4));
				
				lista.add(usuario);
			}
		}catch(SQLException e){
			Log.e(TAG, e.getMessage());
		}finally{
			cursor.close();
		}
		
		Log.i(TAG, "LISTANDO USUARIOS");
		return lista;
	}
	
	public Usuario consultar(long id){

		String sql = "SELECT id, nome, email, matricula, senha FROM " + TABELA + " where id = " + id;
		
		Cursor cursor = getReadableDatabase().rawQuery(sql, null);
		
		try{
			while(cursor.moveToNext()){
				Usuario usuario = new Usuario();
				
				usuario.setId(cursor.getLong(0));
				usuario.setNome(cursor.getString(1));
				usuario.setEmail(cursor.getString(2));
				usuario.setMatricula(cursor.getString(3));
				usuario.setSenha(cursor.getString(4));
				
				return usuario;
			}
		}catch(SQLException e){
			Log.e(TAG, e.getMessage());
		}finally{
			cursor.close();
		}
		
		return null;
	}
	
	public Usuario validaLogin(String email, String senha){

		String sql = "SELECT id, nome, email, matricula, senha FROM " + TABELA + " where email like '" + email +
				"' and senha like '" + Util.criptografaSenha(senha) + "'";
		
		Cursor cursor = getReadableDatabase().rawQuery(sql, null);
		
		try{
			while(cursor.moveToNext()){
				Usuario usuario = new Usuario();
				
				usuario.setId(cursor.getLong(0));
				usuario.setNome(cursor.getString(1));
				usuario.setEmail(cursor.getString(2));
				usuario.setMatricula(cursor.getString(3));
				usuario.setSenha(cursor.getString(4));
				
				return usuario;
			}
		}catch(SQLException e){
			Log.e(TAG, e.getMessage());
		}finally{
			cursor.close();
		}
		
		return null;
	}
	
	public Usuario cadastrar(Usuario usuario){
		
		ContentValues values = new ContentValues();
		
		values.put("nome", usuario.getNome());
		values.put("email", usuario.getEmail());
		values.put("matricula", usuario.getMatricula());
		values.put("senha", usuario.getSenha());
		
		long id = getWritableDatabase().insert(TABELA, null, values);
		Log.i(TAG, "USUARIO CADASTRADA!");
		
		return consultar(id);
	}
}
